{"version":3,"sources":["ChatContext.js","Message.js","Messages.js","Socket.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["ChatContext","createContext","ChatProvider","props","_useState","useState","_useState2","Object","slicedToArray","messages","setMessages","react_default","a","createElement","Provider","value","children","Message","class","sender","content","Messages","_useContext","useContext","_useContext2","map","message","src_Message","user","ref","Messages_this","messagesEndRef","socket","io","connect","on","new_message","prevMessages","Input","text","setText","onSubmit","e","preventDefault","emit","id","type","placeholder","onChange","target","App","className","ChatContext_ChatProvider","src_Messages","src_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAEaA,EAAcC,0BAEdC,EAAe,SAAAC,GAAS,IAAAC,EACDC,mBAAS,IADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1BK,EAD0BH,EAAA,GAChBI,EADgBJ,EAAA,GAEjC,OACIK,EAAAC,EAAAC,cAACb,EAAYc,SAAb,CAAsBC,MAAO,CAACN,EAAUC,IACnCP,EAAMa,WCQJC,EAdC,SAACd,GAEb,OACIQ,EAAAC,EAAAC,cAAA,OAAKK,MAAM,WACPP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,mBACDf,MAAMgB,OADhB,KAGAR,EAAAC,EAAAC,cAAA,OAAKK,MAAM,oBACDf,MAAMiB,oBCiBbC,EAvBE,WAAM,IAAAC,EACaC,qBAAWvB,GADxBwB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GACZb,EADYe,EAAA,GAAAA,EAAA,GAanB,OACIb,EAAAC,EAAAC,cAAA,OAAKK,MAAM,YACNT,EAASgB,IAAI,SAAAC,GACV,OAAOf,EAAAC,EAAAC,cAACc,EAAD,CAASR,OAAQO,EAAQE,KAAMR,QAASM,EAAQN,YAE3DT,EAAAC,EAAAC,cAAA,OAAKgB,IAAKC,EAAKC,sCClBKR,qBAAWvB,sBAA1BU,cAEXsB,EAASC,IAAGC,QAAQ,yBAE1BF,EAAOG,GAAG,UAAW,SAACC,GAClB1B,EAAY,SAAA2B,GAAY,MAAI,CAACA,EAAcD,OAGhCJ,QCaAM,EAtBD,WAAM,IAAAlC,EACQC,mBAAS,IADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTmC,EADSjC,EAAA,GACHkC,EADGlC,EAAA,GAYhB,OACIK,EAAAC,EAAAC,cAAA,OAAKK,MAAM,SACPP,EAAAC,EAAAC,cAAA,QAAO4B,SAPM,SAACC,GAClBA,EAAEC,iBACFX,EAAOY,KAAK,UAAW,CAAChB,KAAQI,EAAOa,GAAIzB,QAAWmB,MAM9C5B,EAAAC,EAAAC,cAAA,SAAOiC,KAAK,OAAOC,YAAY,eAAeC,SAZvC,SAACN,GAChBF,EAAQE,EAAEO,OAAOlC,UAYTJ,EAAAC,EAAAC,cAAA,SAAOiC,KAAK,oBCCbI,MAXf,WACE,OACEvC,EAAAC,EAAAC,cAAA,OAAKsC,UAAU,OACbxC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.acd8d21d.chunk.js","sourcesContent":["import React,  {useState, createContext} from 'react'\n\nexport const ChatContext = createContext()\n\nexport const ChatProvider = props => {\n    const [messages, setMessages] = useState([])\n    return (\n        <ChatContext.Provider value={[messages, setMessages]}>\n            {props.children}\n        </ChatContext.Provider>\n    )\n}","import React from 'react'\n\nconst Message = (props) => {\n\n    return(\n        <div class=\"message\">\n            <div class=\"sender\">\n                {this.props.sender}:\n            </div>\n            <div class=\"content\">\n                {this.props.content}\n            </div>\n        </div>\n    )\n}\n\nexport default Message","import React, {useContext} from 'react'\nimport {ChatContext} from './ChatContext'\nimport Message from './Message'\n\nconst Messages = () => {\n    const [messages, setMessages] = useContext(ChatContext)\n\n    const componentDidMount = () => {\n        this.scrollToBottom()\n    }\n    const componentDidUpdate = () => {\n        this.scrollToBottom()\n    }\n    const scrollToBottom = () => {\n        this.messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\n    }\n\n    return(\n        <div class=\"messages\">\n            {messages.map(message => {\n                return <Message sender={message.user} content={message.content}/>\n            })}\n            <div ref={this.messagesEndRef} />\n        </div>\n    )\n}\n\nexport default Messages","import {ChatContext} from './ChatContext'\nimport {useContext} from 'react'\nimport io from 'socket.io-client'\n\nconst [messages, setMessages] = useContext(ChatContext)\n\nconst socket = io.connect(\"http://localhost:3002\")\n\nsocket.on('message', (new_message) => {\n    setMessages(prevMessages => [prevMessages, new_message])\n})\n\nexport default socket","import React, {useState} from 'react'\nimport socket from './Socket'\n\nconst Input = () => {\n    const [text, setText] = useState('')\n\n    const updateText = (e) => {\n        setText(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        socket.emit('message', {'user': socket.id, 'content': text})\n    }\n\n    return(\n        <div class=\"input\">\n            <form  onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Type here...\" onChange={updateText}/>\n                <input type=\"submit\"/> \n            </form>\n        </div>\n    )\n}\n\nexport default Input","import React from 'react';\n\nimport {ChatProvider} from './ChatContext'\n\nimport Messages from './Messages'\nimport Input from './Input'\nimport './App.css'\n// import Profile from './Profile'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatProvider>\n        <Messages />\n        <Input />\n      </ChatProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}